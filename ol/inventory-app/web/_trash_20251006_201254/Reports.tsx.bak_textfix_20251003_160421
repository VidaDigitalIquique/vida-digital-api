import React, { useState } from "react";

type Row = { code: string; teorico: number; fisico: number; diferencia: number; };

const API_BASE = String((import.meta as any).env?.VITE_API_BASE ?? "http://localhost:4000").replace(/\/$/, "");

export default function Reports() {
  const [txt, setTxt] = useState<string>("021-1\n002");
  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState<boolean>(false);

  async function calc() {
    setLoading(true);
    try {
      const codes = txt
        .split(/[\s,]+/)
        .map(s => s.trim())
        .filter(Boolean);

      const out: Row[] = [];
      for (const code of codes) {
        const url = `${API_BASE}/wh/summary?productCode=${encodeURIComponent(code)}`;
        const r = await fetch(url);
        if (!r.ok) throw new Error(await r.text());
        const j = await r.json();

        const teorico = Number(j?.inventory_boxes ?? 0) || 0;
        const fisico  = Number(j?.physical_boxes ?? 0) || 0;

        out.push({
          code,
          teorico,
          fisico,
          diferencia: Number((fisico - teorico).toFixed(2)),
        });
      }
      setRows(out);
    } catch (e) {
      console.error(e);
      alert("Error calculando reportes. Revisa la consola.");
    } finally {
      setLoading(false);
    }
  }

  function exportCsv() {
    const header = ["Codigo","Teorico","Fisico","Diferencia","%"];
    const lines = rows.map(r => {
      const percent = r.teorico > 0 ? ((r.diferencia / r.teorico) * 100) : null;
      const pctStr  = (percent === null || !isFinite(percent)) ? "" : (percent.toFixed(2) + "%");
      return [r.code, r.teorico, r.fisico, r.diferencia, pctStr].join(",");
    });
    const csv = [header.join(","), ...lines].join("\r\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8" });
    const url  = URL.createObjectURL(blob);
    const a    = document.createElement("a");
    a.href = url; a.download = "reportes.csv";
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  return (
    <div style={{maxWidth: 1080, margin: "36px auto"}}>
      <h2 style={{fontSize: 22, fontWeight: 700, marginBottom: 8}}>Reportes (beta)</h2>
      <p style={{marginBottom: 12}}>
        Pega codigos (uno por linea o separados por coma), luego pulsa <b>Calcular</b>.
      </p>

      <div style={{display: "grid", gridTemplateColumns: "1fr 220px", gap: 12, alignItems: "start"}}>
        <textarea
          value={txt}
          onChange={e => setTxt(e.target.value)}
          placeholder={"Ej: 002\nSF-2074\n021-1"}
          style={{width: "100%", height: 140, padding: 8, fontFamily: "monospace", fontSize: 13}}
        />
        <div style={{display: "grid", gap: 8}}>
          <button onClick={calc} disabled={loading} style={{padding: "8px 10px"}}>
            {loading ? "Calculando..." : "Calcular"}
          </button>
          <button onClick={exportCsv} disabled={!rows.length} style={{padding: "8px 10px"}}>
            Exportar CSV
          </button>
        </div>
      </div>

      <table style={{width: "100%", marginTop: 16, borderCollapse: "collapse"}}>
        <thead>
          <tr>
            {["Codigo","Teorico","Fisico","Diferencia","%"].map(h => (
              <th key={h} style={{textAlign: "left", padding: "8px 6px", borderBottom: "1px solid #e5e7eb"}}>{h}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {rows.length === 0 ? (
            <tr><td colSpan={5} style={{padding: 10, color: "#6b7280"}}>Sin datos�?�</td></tr>
          ) : rows.map((r, i) => {
            const percent = r.teorico > 0 ? ((r.diferencia / r.teorico) * 100) : null;
            const pctStr  = (percent === null || !isFinite(percent)) ? "" : percent.toFixed(2);
            return (
              <tr key={r.code + i}>
                <td style={{padding: "8px 6px"}}>{r.code}</td>
                <td style={{padding: "8px 6px"}}>{r.teorico}</td>
                <td style={{padding: "8px 6px"}}>{r.fisico}</td>
                <td style={{padding: "8px 6px"}}>{r.diferencia}</td>
                <td style={{padding: "8px 6px"}}>{pctStr}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}