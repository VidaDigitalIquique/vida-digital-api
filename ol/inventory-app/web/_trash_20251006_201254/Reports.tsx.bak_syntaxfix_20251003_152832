import React, { useMemo, useState } from "react";

type Row = {
  code: string;
  teorico: number;
  fisico: number;
  diferencia: number;
};

export default function Reports() {
  const [txt, setTxt] = useState<string>("");

  // Normaliza: recorta, quita apÃƒÂ³strofes, MAYÃƒÅ¡SCULAS y dedup
  const codes = useMemo(() => {
    const raw = txt
      .split(/[\n,;]+/g)
      .map(s => s.trim())
      .filter(Boolean);
    const cleaned = raw
      .map(s => s.replace(/^'+|'+$/g, ""))  // '002 -> 002
      .map(s => s.toUpperCase());           // sf-2074 -> SF-2074
    return Array.from(new Set(cleaned));
  }, [txt]);

  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(false);

  async function calc() {
    if (!codes.length) { setRows([]); return; }
    setLoading(true);
    try {
      // Llamadas en paralelo (simple). Si tuvieras /wh/summary?codes=..., cÃƒÂ¡mbialo aquÃƒÂ­.
      const calls = codes.map(async code => {
        const r = await fetch(`/wh/summary?productCode=${encodeURIComponent(code)}`)}`);
        if (!r.ok) throw new Error(await r.text());
        const j = await r.json();
        const teorico = Number(j?.inventory_boxes ?? 0) || 0;
        const fisico  = Number(j?.physical_boxes ?? 0) || 0;
        return {
          code,
          teorico,
          fisico,
          diferencia: Number((fisico - teorico).toFixed(2)),
        } as Row;
      });
      const out = await Promise.all(calls);
      setRows(out);
    } catch (e) {
      console.error(e);
      alert("Error calculando reportes. Revisa la consola.");
    } finally {
      setLoading(false);
    }
  }

  function exportCsv() {
    const header = ["CÃƒÂ³digo","TeÃƒÂ³rico","FÃƒÂ­sico","Diferencia","%"];
    const lines = rows.map(r => {
      const percent = r.teorico > 0 ? ((r.diferencia / r.teorico) * 100) : null;
      const pctStr  = percent === null ? "Ã¢â‚¬â€" : (percent.toFixed(2) + "%");
      return [r.code, r.teorico, r.fisico, r.diferencia, pctStr].join(",");
    });
    const csv = [header.join(","), ...lines].join("\r\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8" });
    const url  = URL.createObjectURL(blob);
    const a    = document.createElement("a");
    a.href = url;
    a.download = "reportes.csv";
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  return (
    <div style={{maxWidth: 1080, margin: "36px auto"}}>
      <h2 style={{fontSize: 22, fontWeight: 700, marginBottom: 8}}>Reportes (beta)</h2>
      <p style={{marginBottom: 12}}>Pega cÃƒÂ³digos (uno por lÃƒÂ­nea o separados por coma), luego pulsa <b>Calcular</b>.</p>

      <div style={{display: "grid", gridTemplateColumns: "1fr 220px", gap: 12, alignItems: "start"}}>
        <textarea
          value={txt}
          onChange={e => setTxt(e.target.value)}
          placeholder="Ej: 002\nSF-2074\n021-1"
          style={{width: "100%", height: 140, padding: 8, fontFamily: "monospace", fontSize: 13}}
        />
        <div style={{display: "grid", gap: 8}}>
          <button onClick={calc} disabled={loading} style={{padding: "8px 10px"}}>
            {loading ? "Calculando..." : `Calcular (${codes.length})`}
          </button>
          <button onClick={exportCsv} disabled={!rows.length} style={{padding: "8px 10px"}}>
            Exportar CSV
          </button>
        </div>
      </div>

      <div style={{marginTop: 18, overflowX: "auto"}}>
        <table style={{width: "100%", borderCollapse: "collapse"}}>
          <thead>
            <tr>
              <th style={{textAlign: "left", borderBottom: "1px solid #ddd", padding: "6px"}}>CÃƒÂ³digo</th>
              <th style={{textAlign: "right", borderBottom: "1px solid #ddd", padding: "6px"}}>TeÃƒÂ³rico</th>
              <th style={{textAlign: "right", borderBottom: "1px solid #ddd", padding: "6px"}}>FÃƒÂ­sico</th>
              <th style={{textAlign: "right", borderBottom: "1px solid #ddd", padding: "6px"}}>Diferencia</th>
              <th style={{textAlign: "right", borderBottom: "1px solid #ddd", padding: "6px"}}>%</th>
            </tr>
          </thead>
          <tbody>
            {rows.map(r => {
              const percent = r.teorico > 0 ? ((r.diferencia / r.teorico) * 100) : null;
              return (
                <tr key={r.code}>
                  <td style={{padding: "6px 6px"}}>{r.code}</td>
                  <td style={{padding: "6px 6px", textAlign: "right"}}>{r.teorico}</td>
                  <td style={{padding: "6px 6px", textAlign: "right"}}>{r.fisico}</td>
                  <td style={{padding: "6px 6px", textAlign: "right"}}>{r.diferencia}</td>
                  <td style={{padding: "6px 6px", textAlign: "right"}}>
                    {percent === null ? "Ã¢â‚¬â€" : percent.toFixed(2) + "%"}
                  </td>
                </tr>
              );
            })}
            {!rows.length && (
              <tr><td colSpan={5} style={{padding: 10, color: "#777"}}>Sin datosÃ¢â‚¬Â¦</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}